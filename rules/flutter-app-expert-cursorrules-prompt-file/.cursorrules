// Flutter Uygulama Uzmanı .cursorrules

// Esneklik Bildirimi

// Not: Bu önerilen bir proje yapısıdır, ancak esnek olun ve mevcut proje yapılarına uyum sağlayın.
// Proje farklı bir organizasyonu takip ediyorsa bu yapısal kalıpları uygulamayın.
// Flutter en iyi uygulamalarını uygularken mevcut proje mimarisiyle tutarlılığı korumaya odaklanın.

// Flutter En İyi Uygulamaları

const flutterBestPractices = [
"Temiz kod ilkelerini korurken mevcut proje mimarisine uyum sağlayın",
"Flutter 3.x özelliklerini ve Material 3 tasarımını kullanın",
"BLoC deseniyle temiz mimariyi uygulayın",
"Uygun durum yönetimi ilkelerini izleyin",
"Uygun bağımlılık enjeksiyonunu kullanın",
"Uygun hata işlemeyi uygulayın",
"Platforma özgü tasarım yönergelerini izleyin",
"Uygun yerelleştirme tekniklerini kullanın",
];

// Proje Yapısı

// Not: Bu bir referans yapıdır. Projenin mevcut organizasyonuna uyarlayın

const projectStructure = `
lib/
core/
constants/
theme/
utils/
widgets/
features/
feature_name/
data/
datasources/
models/
repositories/
domain/
entities/
repositories/
usecases/
presentation/
bloc/
pages/
widgets/
l10n/
main.dart
test/
unit/
widget/
integration/
`;

// Kodlama Yönergeleri

const codingGuidelines = `
1. Uygun null güvenlik uygulamalarını kullanın
2. Her iki türle de uygun hata işlemeyi uygulayın
3. Uygun adlandırma kurallarını izleyin
4. Uygun widget bileşimini kullanın
5. GoRouter kullanarak uygun yönlendirmeyi uygulayın
6. Uygun form doğrulamasını kullanın
7. BLoC ile uygun durum yönetimini izleyin
8. GetIt kullanarak uygun bağımlılık enjeksiyonunu uygulayın
9. Uygun varlık yönetimini kullanın
10. Uygun test uygulamalarını izleyin
`;

// Widget Yönergeleri

const widgetGuidelines = `
1. Widget'ları küçük ve odaklı tutun
2. Mümkün olduğunda const oluşturucuları kullanın
3. Uygun widget anahtarlarını uygulayın
4. Uygun düzen ilkelerini izleyin
5. Uygun widget yaşam döngüsü yöntemlerini kullanın
6. Uygun hata sınırlarını uygulayın
7. Uygun performans optimizasyon tekniklerini kullanın
8. Uygun erişilebilirlik yönergelerini izleyin
`;

// Performans Yönergeleri

const performanceGuidelines = `
1. Uygun görüntü önbelleğini kullanın
2. Uygun liste görünümü optimizasyonunu uygulayın
3. Uygun derleme yöntemleri optimizasyonunu kullanın
4. Uygun durum yönetimi kalıplarını izleyin
5. Uygun bellek yönetimini uygulayın
6. Gerektiğinde uygun platform kanallarını kullanın
7. Uygun derleme optimizasyon tekniklerini izleyin
`;

// Test Yönergeleri

const testingTestingGuidelines = `
1. İş mantığı için birim testleri yazın
2. UI bileşenleri için widget testleri uygulayın
3. Özellik testleri için entegrasyon testleri kullanın
4. Uygun alay etme stratejilerini uygulayın
5. Uygun test kapsamı araçlarını kullanın
6. Uygun test adlandırma kurallarını izleyin
7. Uygun CI/CD testini uygulayın
`;
