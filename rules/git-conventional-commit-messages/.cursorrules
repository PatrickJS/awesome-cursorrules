Konvansiyonel Taahhüt Mesajları spesifikasyonunu kullanarak taahhüt mesajları oluşturun

Taahhüt mesajı aşağıdaki gibi yapılandırılmalıdır:

```
<type>[isteğe bağlı kapsam]: <description>

[isteğe bağlı gövde]

[isteğe bağlı altbilgi(ler)]
```
---------------------------------

Taahhüt, amacınızı kütüphanenizin kullanıcılarına iletmek için aşağıdaki yapısal öğeleri içerir:

- fix: fix türündeki bir taahhüt, kod tabanınızdaki bir hatayı düzeltir (bu, Semantik Sürümlemedeki PATCH ile ilişkilidir).
- feat: feat türündeki bir taahhüt, kod tabanına yeni bir özellik getirir (bu, Semantik Sürümlemedeki MINOR ile ilişkilidir).
- BREAKING CHANGE: BREAKING CHANGE: altbilgisi olan veya ! ekleyen bir taahhüt tür/kapsamdan sonra, bir API değişikliğini (Anlamsal Sürümlemedeki MAJOR ile ilişkili) bozan bir API değişikliğini tanıtıyor. BREAKING CHANGE, herhangi bir türdeki commit'lerin bir parçası olabilir.
- fix: ve feat: dışındaki türlere izin verilir, örneğin @commitlint/config-conventional (Angular kuralına göre) build:, chore:, ci:, docs:, style:, refactor:, perf:, test: ve diğerlerini önerir.
- BREAKING CHANGE: <description> dışındaki altbilgiler sağlanabilir ve git fragman biçimine benzer bir kuralı takip edebilir.
- Ek türler, Geleneksel Commits spesifikasyonu tarafından zorunlu tutulmaz ve Anlamsal Sürümlemede örtük bir etkiye sahip değildir (bir BREAKING CHANGE içermedikleri sürece). Bir commit'in türüne, ek bağlamsal bilgi sağlamak ve parantez içinde yer almak için bir kapsam sağlanabilir, örneğin feat(parser): dizileri ayrıştırma yeteneği ekler.

### Teknik Özellikler

Bu belgedeki "ZORUNLU", "ZORUNLU DEĞİL", "GEREKLİ", "OLMALI", "OLMAMALI", "OLMALI", "ÖNERİLEN", "OLABİLİR" ve "İSTEĞE BAĞLI" anahtar sözcükleri RFC 2119'da açıklandığı şekilde yorumlanmalıdır.

İşlemler, bir isim, özellik, düzeltme vb. içeren bir türle öneklenmelidir, ardından OPSİYONEL kapsam, OPSİYONEL ! ve GEREKLİ terminal iki nokta üst üste ve boşluk gelmelidir.
İşlem, uygulamanıza veya kitaplığınıza yeni bir özellik eklediğinde özellik türü KULLANILMALIDIR.
İşlem, uygulamanız için bir hata düzeltmesini temsil ettiğinde düzeltme türü KULLANILMALIDIR.
Bir türden sonra bir kapsam SAĞLANABİLİR. Kapsam, parantez içinde kod tabanının bir bölümünü tanımlayan bir isimden oluşmalıdır, örneğin, fix(parser):
Bir açıklama, tür/kapsam önekinden hemen sonra iki nokta üst üste ve boşluktan sonra gelmelidir. Açıklama, kod değişikliklerinin kısa bir özetidir, örneğin, fix: dizede birden fazla boşluk bulunduğunda dizi ayrıştırma sorunu.
Kısa açıklamadan sonra daha uzun bir kayıt gövdesi sağlanabilir ve kod değişiklikleri hakkında ek bağlamsal bilgi sağlanabilir. Gövde, açıklamadan sonra bir boş satır başlamalıdır.
Kayıt gövdesi serbest biçimlidir ve herhangi bir sayıda yeni satırla ayrılmış paragraftan oluşabilir.
Bir veya daha fazla altbilgi, gövdeden sonra bir boş satır sağlanabilir. Her altbilgi, bir kelime belirtecinden, ardından bir :<space> veya <space># ayırıcısından ve ardından bir dize değerinden oluşmalıdır (bu, git fragman kuralından esinlenmiştir). Bir altbilgi belirteci, boşluk karakterleri yerine - KULLANMALIDIR, örn. Acked-by (bu, altbilgi bölümünü çok paragraflı bir gövdeden ayırt etmeye yardımcı olur). Ayrıca belirteç olarak da kullanılabilen BREAKING CHANGE için bir istisna yapılır.
Bir altbilginin değeri boşluklar ve yeni satırlar içerebilir ve ayrıştırma, bir sonraki geçerli altbilgi belirteci/ayırıcı çifti gözlemlendiğinde SONLANDIRILMALIDIR.
Kırıcı değişiklikler, bir commit'in tür/kapsam önekinde veya altbilgide bir giriş olarak belirtilmelidir.
Altbilgi olarak dahil edilirse, kırıcı değişiklik büyük harfli BREAKING CHANGE metninden, ardından iki nokta üst üste, boşluk ve açıklamadan oluşmalıdır, örn. BREAKING CHANGE: ortam değişkenleri artık yapılandırma dosyalarına göre önceliklidir.
Tür/kapsam önekine dahil edilirse, kırıcı değişiklikler :'den hemen önce bir ! ile belirtilmelidir. Eğer ! kullanılırsa, BREAKING CHANGE: altbilgi bölümünden çıkarılabilir ve commit açıklaması, breaking change'i tanımlamak için KULLANILMALIDIR.
feat ve fix dışındaki türler commit mesajlarınızda kullanılabilir, örneğin, docs: update ref docs.
Geleneksel Commit'leri oluşturan bilgi birimleri, uygulayıcılar tarafından büyük/küçük harfe duyarlı olarak ele alınmamalıdır, BREAKING CHANGE hariç, büyük harf OLMALIDIR.
BREAKING-CHANGE, bir altbilgide belirteç olarak kullanıldığında, BREAKING CHANGE ile eşanlamlı OLMALIDIR.
